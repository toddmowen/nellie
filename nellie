#!/usr/bin/env python3

import sys
import os
import argparse
import subprocess

script_dir = os.path.dirname(__file__)
docker_compose_base = ['docker-compose', '-f', os.path.join(script_dir, 'cloudera', 'docker-compose.yml')]
docker_compose = docker_compose_base + ['-f', os.path.join(script_dir, 'cloudera', 'docker-compose.auxiliary.yml')]

parser = argparse.ArgumentParser(description='Manage a virtual hadoop cluster.')
parser.add_argument('-c', dest='passthru', nargs=argparse.REMAINDER, help='execute a docker-compose command')
subparsers = parser.add_subparsers(metavar='COMMAND')

def parse_args():
    args = parser.parse_args()
    if args.passthru is not None:
        args.func = passthru
    elif not hasattr(args, 'func'):
        parser.print_help()
        sys.exit(0)
    return args

def passthru(args):
    return subprocess.call(docker_compose + args.passthru)

def up(args):
    return subprocess.call(docker_compose_base + ['up', '-d']) \
        or subprocess.call(docker_compose + ['run', '--rm', 'client', '/usr/bin/wait-for-cluster', '2'])

up_parser = subparsers.add_parser('up', help='Bring up the cluster')
up_parser.set_defaults(func=up)

def down(args):
    subprocess.check_call(docker_compose + ['down'])
    subprocess.check_call(docker_compose + ['rm', '--all'])
    return 0

down_parser = subparsers.add_parser('down', help='Shut down the cluster')
down_parser.set_defaults(func=down)

def run(args):
    return subprocess.call(docker_compose + ['run', '--rm', 'client', args.program] + args.args)

run_parser = subparsers.add_parser('run', help='Run a command on the cluster')
run_parser.add_argument('program')
run_parser.add_argument('args', nargs=argparse.REMAINDER)
run_parser.set_defaults(func=run)

def ps(args):
    return subprocess.call(docker_compose + ['ps'])

ps_parser = subparsers.add_parser('ps', help='List containers')
ps_parser.set_defaults(func=ps)

if __name__ == '__main__':
    args = parse_args()
    exitcode = args.func(args)
    sys.exit(exitcode)