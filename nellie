#!/usr/bin/env python

import sys
import os
import argparse
import subprocess
from urlparse import urlparse

script_dir = os.path.dirname(__file__)
docker_compose_base = ['docker-compose', '-f', os.path.join(script_dir, 'cloudera', 'docker-compose.yml')]
docker_compose = docker_compose_base + ['-f', os.path.join(script_dir, 'cloudera', 'docker-compose.auxiliary.yml')]

parser = argparse.ArgumentParser(description='Manage a virtual hadoop cluster.')
parser.add_argument('-c', dest='passthru', nargs=argparse.REMAINDER, help='execute a docker-compose command')
subparsers = parser.add_subparsers(metavar='COMMAND')

def parse_args():
    # When -c is passed, no other subcommand is expected. But prior to Python 3.3,
    # the subparser cannot be optional. Instead, we handle the parsing of -c ourselves:
    if sys.argv[1:2] == ['-c']:
        args = argparse.Namespace(func=passthru, passthru=sys.argv[2:])
    else:
        args = parser.parse_args()
    return args

def passthru(args):
    return subprocess.call(docker_compose + args.passthru)

def up(args):
    return subprocess.call(docker_compose_base + ['up', '-d', 'server', 'webproxy']) \
        or subprocess.call(docker_compose + ['run', '--rm', 'client', '/usr/bin/wait-for-cluster', '1'])

up_parser = subparsers.add_parser('up', help='Bring up the cluster')
up_parser.set_defaults(func=up)

def down(args):
    subprocess.check_call(docker_compose + ['down'])
    subprocess.check_call(docker_compose + ['rm', '--all'])
    return 0

down_parser = subparsers.add_parser('down', help='Shut down the cluster')
down_parser.set_defaults(func=down)

def run(args):
    return subprocess.call(docker_compose + ['run', '--rm', 'client', args.program] + args.args)

run_parser = subparsers.add_parser('run', help='Run a command on the cluster')
run_parser.add_argument('program')
run_parser.add_argument('args', nargs=argparse.REMAINDER)
run_parser.set_defaults(func=run)

def ps(args):
    return subprocess.call(docker_compose + ['ps'])

ps_parser = subparsers.add_parser('ps', help='List containers')
ps_parser.set_defaults(func=ps)

def scale(args):
    nodes = args.N
    return subprocess.call(docker_compose + ['scale', 'worker=' + str(nodes - 1)]) \
        or subprocess.call(docker_compose + ['run', '--rm', 'client', '/usr/bin/wait-for-cluster', str(nodes)])

scale_parser = subparsers.add_parser('scale', help='Scale cluster to N nodes (WARNING: downscaling may corrupt HDFS)')
scale_parser.add_argument('N', type=int, help='Desired number of nodes')
scale_parser.set_defaults(func=scale)

def jobtracker(args):
    chrome("http://quickstart.cloudera:8088/")

jobtracker_parser = subparsers.add_parser('jobtracker', help='Open the jobtracker web interface in Chrome')
jobtracker_parser.set_defaults(func=jobtracker)

def chrome(url):
    port = subprocess.check_output(docker_compose + ['port', 'webproxy', '8888']).decode().strip()
    portnum = port.split(':')[1]
    host = urlparse(os.environ['DOCKER_HOST']).netloc.split(':')[0]
    proxy = host + ":" + portnum
    # TODO (solution will probably involve passing --user-data-dir)
    print "WARNING: Correct proxy settings will not be injected if Chrome is currently running."
    subprocess.call(['open', '-a', 'Google Chrome', url,
                     '--args', '--proxy-server=http={};https={}'.format(proxy, proxy)])

if __name__ == '__main__':
    args = parse_args()
    exitcode = args.func(args)
    sys.exit(exitcode)
